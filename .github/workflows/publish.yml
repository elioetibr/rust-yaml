name: Publish

# This workflow handles publishing to crates.io and creating release artifacts.
# It assumes that tests have already passed (via CI workflow or manual verification).
# 
# Triggered by:
# - Creating a GitHub release (automatic)
# - Manual workflow dispatch (for controlled releases)
#
# Note: The CI workflow (ci.yml) handles testing and validation.
# This workflow focuses solely on the publishing process.

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.1.0)'
        required: true
        type: string
      dry_run:
        description: 'Perform a dry run without publishing'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: read
  id-token: write
  pages: write
  pull-requests: write

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      should_publish: ${{ steps.check.outputs.should_publish }}
    steps:
      - name: Generate GitHub App Token
        id: github_app_auth
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.APP_ID }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: "0"

      - name: GitHub Actions Bot Setup
        uses: ./.github/actions/bot-setup

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            # Extract version from tag (remove 'v' prefix if present)
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"
          else
            # Use version from workflow dispatch input
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Publishing version: ${VERSION}"

      - name: Validate version format
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if ! echo "${VERSION}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$'; then
            echo "‚ùå Invalid version format: ${VERSION}"
            echo "Version must follow semantic versioning (e.g., 1.0.0, 1.0.0-beta.1)"
            exit 1
          fi

      - name: Check if should publish
        id: check
        run: |
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "should_publish=false" >> $GITHUB_OUTPUT
            echo "üîç Dry run mode - will not publish"
          else
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Will proceed with publishing"
          fi

  publish-crate:
    name: Publish to crates.io
    needs: [validate]
    if: needs.validate.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    environment: crates-io
    steps:
      - name: Generate GitHub App Token
        id: github_app_auth
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.APP_ID }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: "0"

      - name: GitHub Actions Bot Setup
        uses: ./.github/actions/bot-setup

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-edit
        run: cargo install cargo-edit

      - name: Set version in Cargo.toml
        run: |
          cargo set-version ${{ needs.validate.outputs.version }}
          echo "Updated Cargo.toml to version ${{ needs.validate.outputs.version }}"

      - name: Verify package
        run: |
          echo "üì¶ Verifying package..."
          cargo package --verbose
          cargo package --list
          
          # Check package size
          PACKAGE_SIZE=$(cargo package --list | wc -l)
          echo "Package contains ${PACKAGE_SIZE} files"

      - name: Check crates.io status
        id: check_crates
        run: |
          CRATE_NAME="rust-yaml"
          VERSION="${{ needs.validate.outputs.version }}"
          
          # Check if version already exists
          if cargo search "${CRATE_NAME}" --limit 1 | grep -q "^${CRATE_NAME}.*\"${VERSION}\""; then
            echo "‚ùå Version ${VERSION} already exists on crates.io"
            exit 1
          else
            echo "‚úÖ Version ${VERSION} is available for publishing"
          fi

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cargo publish --token "${CARGO_REGISTRY_TOKEN}" --verbose
          echo "üéâ Successfully published version ${{ needs.validate.outputs.version }} to crates.io"

      - name: Verify publication
        run: |
          echo "Waiting for crates.io to index the new version..."
          sleep 60
          
          CRATE_NAME="rust-yaml"
          VERSION="${{ needs.validate.outputs.version }}"
          
          if cargo search "${CRATE_NAME}" --limit 1 | grep -q "^${CRATE_NAME}.*\"${VERSION}\""; then
            echo "‚úÖ Version ${VERSION} is now available on crates.io"
            echo "üìö View at: https://crates.io/crates/${CRATE_NAME}/${VERSION}"
          else
            echo "‚ö†Ô∏è Version not yet indexed, but should appear soon"
          fi

  publish-docs:
    name: Publish Documentation
    needs: [validate, publish-crate]
    if: needs.validate.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Generate GitHub App Token
        id: github_app_auth
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.APP_ID }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: "0"

      - name: GitHub Actions Bot Setup
        uses: ./.github/actions/bot-setup

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-edit
        run: cargo install cargo-edit

      - name: Set version
        run: cargo set-version ${{ needs.validate.outputs.version }}

      - name: Build documentation
        run: |
          echo "üìö Building documentation..."
          cargo doc --all-features --no-deps
          
          # Create root index.html redirect
          echo '<meta http-equiv="refresh" content="0; url=rust_yaml/index.html">' > target/doc/index.html
          
          # Add version info
          echo "Documentation built for version ${{ needs.validate.outputs.version }}" > target/doc/VERSION

      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: target/doc

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Documentation URLs
        run: |
          echo "üìö Documentation URLs:"
          echo "  - docs.rs: https://docs.rs/rust-yaml/${{ needs.validate.outputs.version }}"
          echo "  - Latest: https://docs.rs/rust-yaml/latest"
          echo "  - GitHub Pages: https://${{ github.repository_owner }}.github.io/rust-yaml/"

  create-release-artifacts:
    name: Create Release Artifacts
    needs: [validate]
    if: github.event_name == 'release'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rust-yaml-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: rust-yaml-linux-arm64
          - os: windows-2025
            target: x86_64-pc-windows-msvc
            artifact_name: rust-yaml-windows-amd64
          - os: macos-15
            target: x86_64-apple-darwin
            artifact_name: rust-yaml-macos-amd64
          - os: macos-15
            target: aarch64-apple-darwin
            artifact_name: rust-yaml-macos-arm64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Generate GitHub App Token
        id: github_app_auth
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.APP_ID }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: "0"

      - name: GitHub Actions Bot Setup
        uses: ./.github/actions/bot-setup

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Set environment for cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Build release binary
        run: |
          cargo build --release --target ${{ matrix.target }} --all-features
          
      - name: Create archive (Unix)
        if: matrix.os != 'windows-2025'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ${{ matrix.artifact_name }}.tar.gz rust-yaml
          mv ${{ matrix.artifact_name }}.tar.gz ../../../

      - name: Create archive (Windows)
        if: matrix.os == 'windows-2025'
        shell: pwsh
        run: |
          cd target/${{ matrix.target }}/release
          Compress-Archive -Path rust-yaml.exe -DestinationPath ../../../${{ matrix.artifact_name }}.zip

      - name: Upload to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ matrix.artifact_name }}.tar.gz
            ${{ matrix.artifact_name }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}

  summary:
    name: Publication Summary
    needs: [validate, publish-crate, publish-docs]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          echo "# üì¶ Publication Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish-crate.result }}" = "success" ]; then
            echo "‚úÖ **crates.io:** Successfully published" >> $GITHUB_STEP_SUMMARY
            echo "   - View: https://crates.io/crates/rust-yaml/${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.publish-crate.result }}" = "skipped" ]; then
            echo "‚è≠Ô∏è **crates.io:** Skipped (dry run or already published)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **crates.io:** Failed or not completed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish-docs.result }}" = "success" ]; then
            echo "‚úÖ **Documentation:** Successfully published" >> $GITHUB_STEP_SUMMARY
            echo "   - docs.rs: https://docs.rs/rust-yaml/latest" >> $GITHUB_STEP_SUMMARY
            echo "   - GitHub Pages: https://${{ github.repository_owner }}.github.io/rust-yaml/" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.publish-docs.result }}" = "skipped" ]; then
            echo "‚è≠Ô∏è **Documentation:** Skipped (dry run)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Documentation:** Failed or not completed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify the crate at: https://crates.io/crates/rust-yaml" >> $GITHUB_STEP_SUMMARY
          echo "2. Check documentation at: https://docs.rs/rust-yaml" >> $GITHUB_STEP_SUMMARY
          echo "3. Create release notes if not already done" >> $GITHUB_STEP_SUMMARY
          echo "4. Announce the release" >> $GITHUB_STEP_SUMMARY