[package]
name = "rust-yaml"
version = "0.0.4"
authors = ["Elio Severo Junior <elioseverojunior@gmail.com>"]
edition = "2021"
rust-version = "1.85.0"
description = "A fast, safe YAML 1.2 library for Rust"
documentation = "https://docs.rs/rust-yaml"
readme = "README.md"
repository = "https://github.com/elioetibr/rust-yaml"
license = "MIT OR Apache-2.0"
keywords = ["configuration", "markup", "parser", "serialization", "yaml"]
categories = ["config", "encoding", "parser-implementations"]
exclude = [
  "*.bak",
  "*.log",
  "*.profdata",
  "*.profraw",
  "*.swo",
  # Editor and OS files
  "*.swp",
  "*.tmp",
  "*~",
  ".DS_Store",
  # Development tools and configs
  ".cargo/",
  ".claude/",
  ".clippy.toml",
  # Version control
  ".git/",
  ".gitattributes",
  ".githooks/",
  # CI/CD and GitHub
  ".github/",
  ".gitignore",
  ".gitlab-ci.yml",
  ".gitmessage",
  ".idea/",
  ".markdownlint.json",
  ".nvmrc",
  ".pre-commit-config.yaml",
  ".secrets.baseline",
  ".travis.yml",
  ".vscode/",
  "CLAUDE.md",
  "CODE_OF_CONDUCT.md",
  "CONTRIBUTING.md",
  "Cargo.lock",  # For libraries
  "GitVersion.yml",
  "Makefile",
  "SECURITY.md",
  "Thumbs.db",
  # Benchmarks (optional, include if you want them in the package)
  "benches/",
  "commitlint.config.js",
  "deny.toml",
  # Documentation and community files
  "docs/",
  "lcov.info",
  # Node.js/JavaScript files
  "node_modules/",
  "package-lock.json",
  "package.json",
  # Build artifacts and caches
  "target/",
  # Test files (tests/ should be included for cargo test)
  "test-data/",

  # Examples (optional, you might want to include these)
  # "examples/",
]

[package.metadata.docs.rs]
# Build docs with all features on docs.rs
all-features = true
# Specify arguments for rustdoc to enhance documentation quality
rustdoc-args = [
  "--generate-link-to-definition",
  "--cfg",
  "docsrs",
  "--document-private-items",
]
# Specify targets for docs.rs to build
targets = ["x86_64-unknown-linux-gnu"]

[lib]
crate-type = ["lib"]
name = "rust_yaml"
path = "src/lib.rs"
required-features = []

[[example]]
name = "library_comparison"

[[example]]
name = "merge_key_demo"

[[example]]
name = "streaming_parser_demo"

[[bench]]
harness = false
name = "parsing"

[[bench]]
harness = false
name = "dumping"

[[bench]]
harness = false
name = "advanced_features"

[[bench]]
harness = false
name = "profiling"

[[bench]]
harness = false
name = "performance_regression"

[[bench]]
harness = false
name = "performance"

[[bench]]
harness = false
name = "zero_copy"

[[bench]]
harness = false
name = "streaming"

[dependencies]
# Base64 encoding/decoding for binary data tags
base64 = "0.22"
futures = { version = "0.3", optional = true }
# Core dependencies for YAML processing
indexmap = { version = "2.0", features = ["serde"] }
# Memory mapping for large files
memmap2 = { version = "0.9", optional = true }
# Optional serde support
serde = { version = "1.0", features = ["derive"], optional = true }
# Async support
tokio = { version = "1.40", features = ["fs", "io-util", "rt"], optional = true }

[dev-dependencies]
# Testing and benchmarking
criterion = { version = "0.7", features = ["html_reports"] }
pretty_assertions = "1.4"
proptest = "1.2"
tempfile = "3.8"
# For async tests
tokio = { version = "1.40", features = ["macros", "rt", "test-util"] }

[features]
# Async/await support
async = ["futures", "tokio"]
default = ["mmap", "preserve-order"]
# All features
full = ["async", "large-documents", "mmap", "serde_support"]
# Support for large documents
large-documents = []
# Memory-mapped file support
mmap = ["memmap2"]
# Preserve document order
preserve-order = []
serde = ["dep:serde", "indexmap/serde"]
# Serde integration
serde_support = ["serde"]

[profile.release]
lto = true
panic = "abort"
codegen-units = 1

[profile.bench]
debug = true
